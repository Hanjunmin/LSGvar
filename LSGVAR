#!/usr/bin/env python3

# -*- coding: us-ascii -*-
"""
Created on Thurs April 3 10:56 2025
@Author: Feifei Zhou
"""

import argparse
import subprocess
import json
import sys
import shutil
from pathlib import Path
from utils import process_paf, run_minimap, process_filtering, run_cluster_and_call, run_cigar_processing, run_dup_filtering, generate_vcf, split_vcf, integrate_results, remove_temp_files

def log_step(step_name):
    print(f"Running step: {step_name}")

def check_file_exists(file_path):
    return Path(file_path).exists()

def LSGvar(args):
    # make output directory
    output_dir = Path("results")
    output_dir.mkdir(exist_ok=True)

    ## Check the alignments file, and then preprocess the alignments file
    ## If there doesn't have paf file, then align first
    if args.paf1:
        log_step("process_paf for hap1")
        output_file = f"align_hap1.flt.paf"
        if not check_file_exists(output_file):
            try:
                process_paf(args.paf1, args.pairs1, "hap1")
            except Exception as e:
                print(f"Error in process_paf for hap1: {e}")
                sys.exit(1)
    else:
        log_step("run_minimap for hap1")
        paf_file = f"align_hap1.paf"
        if not check_file_exists(paf_file):
            try:
                run_minimap(args.ref, args.hap1, "hap1", args.pairs1)
            except Exception as e:
                print(f"Error in run_minimap for hap1: {e}")
                sys.exit(1)

    log_step("process_filtering for hap1")
    final_paf_file = f"align_hap1.final.paf"
    if not check_file_exists(final_paf_file):
        try:
            process_filtering("hap1", args.mode, args.cluster, args.dellength, args.centromere, args.telomere)
        except Exception as e:
            print(f"Error in process_filtering for hap1: {e}")
            sys.exit(1)

    if args.hap2:
        if args.paf2:
            log_step("process_paf for hap2")
            output_file = f"align_hap2.flt.paf"
            if not check_file_exists(output_file):
                try:
                    process_paf(args.paf2, args.pairs2, "hap2")
                except Exception as e:
                    print(f"Error in process_paf for hap2: {e}")
                    sys.exit(1)
        else:
            log_step("run_minimap for hap2")
            paf_file = f"align_hap2.paf"
            if not check_file_exists(paf_file):
                try:
                    run_minimap(args.ref, args.hap2, "hap2", args.pairs2)
                except Exception as e:
                    print(f"Error in run_minimap for hap2: {e}")
                    sys.exit(1)

        log_step("process_filtering for hap2")
        final_paf_file = f"align_hap2.final.paf"
        if not check_file_exists(final_paf_file):
            try:
                process_filtering("hap2", args.mode, args.cluster, args.dellength, args.centromere, args.telomere)
            except Exception as e:
                print(f"Error in process_filtering for hap2: {e}")
                sys.exit(1)

    ## SV calling
    log_step("run_cluster_and_call for hap1")
    sdrall_file = Path(f"denSDRhap1")/"SDRall_final.txt"
    if not check_file_exists(sdrall_file):
        try:
            run_cluster_and_call(args.ref, args.hap1, "hap1", args.invcluster)
        except Exception as e:
            print(f"Error in run_cluster_and_call for hap1: {e}")
            sys.exit(1)

    if args.hap2:
        log_step("run_cluster_and_call for hap2")
        sdrall_file = Path(f"denSDRhap2")/"SDRall_final.txt"
        if not check_file_exists(sdrall_file):
            try:
                run_cluster_and_call(args.ref, args.hap2, "hap2", args.invcluster)
            except Exception as e:
                print(f"Error in run_cluster_and_call for hap2: {e}")
                sys.exit(1)

    ## INDEL, SNV and SV calling from CIGAR
    log_step("run_cigar_processing for hap1")
    cigar_end_file = f"hap1cigarend.txt"
    if not check_file_exists(cigar_end_file):
        try:
            run_cigar_processing(args.ref, args.hap1, "hap1")
        except Exception as e:
            print(f"Error in run_cigar_processing for hap1: {e}")
            sys.exit(1)

    if args.hap2:
        log_step("run_cigar_processing for hap2")
        cigar_end_file = f"hap2cigarend.txt"
        if not check_file_exists(cigar_end_file):
            try:
                run_cigar_processing(args.ref, args.hap2, "hap2")
            except Exception as e:
                print(f"Error in run_cigar_processing for hap2: {e}")
                sys.exit(1)

    ## Dup filter
    log_step("run_dup_filtering for hap1")
    cigarout_file = f"hap1cigarout.txt"
    cigarend_file = f"hap1cigarend.txt"
    if not args.nosnv:  
        if not check_file_exists(cigarout_file):
            try:
                run_dup_filtering("hap1")
            except Exception as e:
                print(f"Error in run_dup_filtering for hap1: {e}")
                sys.exit(1)
    else:
        try:
            shutil.copyfile(cigarend_file, cigarout_file)
        except Exception as e:
            sys.exit(1)

    if args.hap2:
        log_step("run_dup_filtering for hap2")
        cigarout_file = f"hap2cigarout.txt"
        cigarend_file = f"hap2cigarend.txt"
        if not args.nosnv:  
            if not check_file_exists(cigarout_file):
                try:
                    run_dup_filtering("hap2")
                except Exception as e:
                    print(f"Error in run_dup_filtering for hap2: {e}")
                    sys.exit(1)
                    
        else:
            try:
                shutil.copyfile(cigarend_file, cigarout_file)
            except Exception as e:
                sys.exit(1)

    ## Generate vcf and bed
    log_step("generate_vcf for hap1")
    vcf_file = Path(f"results") / f"hap1cigarsdr.vcf"
    if not check_file_exists(vcf_file):
        try:
            generate_vcf(args.ref, args.hap1, "hap1", args.variant)
        except Exception as e:
            print(f"Error in generate_vcf for hap1: {e}")
            sys.exit(1)

    if args.hap2:
        log_step("generate_vcf for hap2")
        vcf_file = Path(f"results") / f"hap2cigarsdr.vcf"
        if not check_file_exists(vcf_file):
            try:
                generate_vcf(args.ref, args.hap2, "hap2", args.variant)
            except Exception as e:
                print(f"Error in generate_vcf for hap2: {e}")
                sys.exit(1)

    log_step("split_vcf for hap1")
    hap_dir = Path(f"hap1")
    split_check_file = hap_dir / "sortindel.vcf.gz"  
    if not check_file_exists(split_check_file):
        try:
            split_vcf("hap1", args.variant)
        except Exception as e:
            print(f"Error in split_vcf for hap1: {e}")
            sys.exit(1)

    if args.hap2:
        log_step("split_vcf for hap2")
        hap_dir = Path(f"hap2")
        split_check_file = hap_dir / "sortindel.vcf.gz"  
        if not check_file_exists(split_check_file):
            try:
                split_vcf("hap2", args.variant)
            except Exception as e:
                print(f"Error in split_vcf for hap2: {e}")
                sys.exit(1)

    if args.hap2:
        log_step("integrate_results")
        result_dir = Path("results")
        final_bed = result_dir / "LSGvar.bed"  # Check for the existence of the final output
        if not check_file_exists(final_bed):
            try:
                integrate_results(args.ref, "hap1", "hap2", args.variant)
            except Exception as e:
                print(f"Error in integrate_results: {e}")
                sys.exit(1)
    remove_temp_files()

def main():

    ascii_art = [
        r" _        _____    _____  __       __   _       ______  ",
        r"| |      / ____|  / ____| \ \     / /  / \     |  __  \ ",
        r"| |     | (___   | |  __   \ \   / /  / - \    | |__| |",
        r"| |      \___ \  | | |_ \   \ \ / /  / /_\ \   |  __  / ",
        r"| |___   ____) | | |___) |   \ - /  / /___\ \  | |  \ \ ",
        r"|_____| |_____/   \_____/     \_/  /_/     \_\ |_|   \_\ "
    ]

    for line in ascii_art:
        print(line)

    print("\nLarge-Scale Genetic VARiation caller\n")
    print("\nRun command:")
    print("LSGVAR -r ref.fa -q1 hap1.fa -q2 hap2.fa -p1 hap1.paf -p2 hap2.paf -cp1 PTR_hap1_pair.tsv -cp2 PTR_hap2_pair.tsv -cen chm13_cen.tsv -telo chm13_telo.tsv -m cts\n")
    
    parser = argparse.ArgumentParser()
    required = parser.add_argument_group("Input Files")

    required.add_argument('-r', '--ref', required=True, help='Reference genome for variants calling')
    required.add_argument('-q1', '--hap1', required=True, help='One query genome (Which is one haplotype of one species genome)')
    required.add_argument('-q2', '--hap2', help='Another query genome (Which is another haplotype of the species genome)')
    required.add_argument('-p1', '--paf1', help='Alignment of hap1 (Which contains the CIGAR infomation)')
    required.add_argument('-p2', '--paf2', help='Alignment for hap2 (Which contains the CIGAR infomation)')
    required.add_argument('-cp1', '--pairs1', required=True, help='Chromsome pairs of query genome (hap1) and reference')
    required.add_argument('-cp2', '--pairs2', help='Chromsome pairs of query genome (hap2) and reference')
    required.add_argument('-c', '--cluster', type=int, default=200000, help='Clustering parameter for filtering, where a smaller value results in a stricter filter [200000]')
    required.add_argument('-d', '--dellength', type=int, default=300000, help='A desired deletion length for alignments, where a larger value enforces a stricter filter [300000]')
    required.add_argument('-i', '--invcluster', type=int, default=700000, help='Clustering parameter for inversion calling [700000]')
    required.add_argument('-cen', '--centromere', required=False, help='A centromere file which is used to filter out the alignment of complex regions that may not be well aligned [False]')
    required.add_argument('-telo', '--telomere', required=False, help='A telomere file which is used to filter out the alignment of complex regions that may not be well aligned [False]')
    required.add_argument('-m', '--mode', choices=['ctn', 'cts'], required=True,
                        help='Analysis mode: ctn (do not remove centromere and telomere alignments) or cts (remove) [ctn]')
    
    ## Parameters for generating results
    merge = parser.add_argument_group("Additional arguments")
    merge.add_argument('-vt', '--variant', type=str, help="Comma-separated variant types to generate final result (default: all). "
         "Options: snv, ins, del, inv, trans, sdr, dup, highdup", default="all")
    merge.add_argument("--nosnv", dest="nosnv", help="Params for skipping SNV/Indel identification and merge", action="store_true", default=False)

    args = parser.parse_args()
    LSGvar(args)

if __name__ == "__main__":
    main()
